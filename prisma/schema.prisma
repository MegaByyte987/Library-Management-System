// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// User-> librarian

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReservationType {
  borrow
  return
}

model User {
  user_id       Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  email         String    @unique 
  password      String
  mobile        String    @db.VarChar(15) @unique
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  books Book[]
  members Member[]
  transactions Transaction[]
  @@map("users")
}

model Member {
  id            Int       @id @default(autoincrement())
  user_id       Int       
  name          String    @db.VarChar(100)
  email         String    @unique
  password      String
  mobile        String    @db.VarChar(15) @unique
  address       String    @db.VarChar(191)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  user User @relation(fields: [user_id], references: [user_id])
  transactions Transaction[]
  @@map("members")
}

model Book {
  id         Int    @id @default(autoincrement()) 
  user_id    Int     
  title      String @db.VarChar(191)
  author     String @db.VarChar(191)
  quantity   Int?
  availability Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [user_id])
  transactions Transaction[]
  @@map("books")
}

model Transaction {
  id          Int    @id @default(autoincrement())
  member_id   Int
  user_id     Int
  book_id     Int
  transactionDate  DateTime @default(now())
  type            ReservationType @default(borrow)

  user User @relation(fields:[user_id], references: [user_id])
  member Member @relation(fields:[member_id], references: [id])
  books Book @relation(fields:[book_id], references: [id])
  @@map("transactions")
}




